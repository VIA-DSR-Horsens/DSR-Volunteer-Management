// <auto-generated />
using DatabaseEFC;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseEFC.Migrations
{
    [DbContext(typeof(ManagementContext))]
    [Migration("20221213111838_ExtendingAdministrator")]
    partial class ExtendingAdministrator
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dsr-management")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseEFC.Utils.Administrator", b =>
                {
                    b.Property<long>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AdministratorId"));

                    b.Property<long>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<long>("VolunteerId")
                        .HasColumnType("bigint");

                    b.HasKey("AdministratorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Administrators", "dsr-management");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Event", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EventId"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndTime")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("StartTime")
                        .HasColumnType("text");

                    b.HasKey("EventId");

                    b.ToTable("Events", "dsr-management");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Manager", b =>
                {
                    b.Property<long>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ManagerId"));

                    b.Property<long>("VolunteerId")
                        .HasColumnType("bigint");

                    b.HasKey("ManagerId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Managers", "dsr-management");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Shift", b =>
                {
                    b.Property<long>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ShiftId"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VolunteerId")
                        .HasColumnType("bigint");

                    b.HasKey("ShiftId");

                    b.HasIndex("EventId");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Shifts", "dsr-management");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Volunteer", b =>
                {
                    b.Property<long>("VolunteerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("VolunteerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Rating")
                        .HasColumnType("bigint");

                    b.Property<long>("ShiftsTaken")
                        .HasColumnType("bigint");

                    b.HasKey("VolunteerId");

                    b.ToTable("Volunteers", "dsr-management");
                });

            modelBuilder.Entity("EventManager", b =>
                {
                    b.Property<long>("EventsManagedEventId")
                        .HasColumnType("bigint");

                    b.Property<long>("ManagersManagerId")
                        .HasColumnType("bigint");

                    b.HasKey("EventsManagedEventId", "ManagersManagerId");

                    b.HasIndex("ManagersManagerId");

                    b.ToTable("EventManager", "dsr-management");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Administrator", b =>
                {
                    b.HasOne("DatabaseEFC.Utils.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseEFC.Utils.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Manager", b =>
                {
                    b.HasOne("DatabaseEFC.Utils.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Shift", b =>
                {
                    b.HasOne("DatabaseEFC.Utils.Event", "Event")
                        .WithMany("Shifts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseEFC.Utils.Volunteer", "Volunteer")
                        .WithMany("Shifts")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("EventManager", b =>
                {
                    b.HasOne("DatabaseEFC.Utils.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsManagedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseEFC.Utils.Manager", null)
                        .WithMany()
                        .HasForeignKey("ManagersManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Event", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("DatabaseEFC.Utils.Volunteer", b =>
                {
                    b.Navigation("Shifts");
                });
#pragma warning restore 612, 618
        }
    }
}
